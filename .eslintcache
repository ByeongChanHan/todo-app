[{"C:\\Users\\Administrator\\Desktop\\todo-app\\client\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\todo-app\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Administrator\\Desktop\\todo-app\\client\\src\\App.js":"3","C:\\Users\\Administrator\\Desktop\\todo-app\\client\\src\\Components\\title.js":"4"},{"size":266,"mtime":1610805175137,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1608212137462,"results":"7","hashOfConfig":"6"},{"size":175,"mtime":1610804822541,"results":"8","hashOfConfig":"6"},{"size":7312,"mtime":1611491772091,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1a2qwlj",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"C:\\Users\\Administrator\\Desktop\\todo-app\\client\\src\\index.js",[],["20","21"],"C:\\Users\\Administrator\\Desktop\\todo-app\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Administrator\\Desktop\\todo-app\\client\\src\\App.js",[],"C:\\Users\\Administrator\\Desktop\\todo-app\\client\\src\\Components\\title.js",["22"],"import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport '../Stylesheets/title.css'\r\nimport plus from '../images/plus.png'\r\nimport trashcan from '../images/trashcan.png'\r\nimport $ from 'jquery'\r\n\r\nfunction Title(){\r\n    const [Countid,SetCountid] = useState(0);\r\n    const [Showtodos,SetShowtodos] = useState([]);\r\n    const [Savetodos,SetSavetodos] = useState({listnum : 0,\r\n        dolist : []});\r\n    const _getlist = async () =>{\r\n        const axiosConfig = {\r\n            headers: {\r\n                \"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n        };\r\n        await axios.get('https://chantodo.herokuapp.com/list',axiosConfig)\r\n        .then(response=>{\r\n            var jsontext = response.data.dolist\r\n            var jsonlistnum = response.data.listnum\r\n            var outputarray = [];\r\n            if(jsontext===undefined){\r\n                return false;\r\n            }\r\n            else{\r\n                for(let idx=0; idx < jsontext.length; idx++){\r\n                    outputarray.push(jsontext[idx].paraContent)\r\n                }\r\n            }\r\n            SetShowtodos(outputarray)\r\n            console.log(Showtodos)\r\n            SetSavetodos({listnum : jsonlistnum,dolist : outputarray})\r\n            console.log(Savetodos)\r\n        })\r\n    }\r\n    useEffect(()=>{\r\n        _getlist()\r\n    },[])\r\n    const checkHandler = (event) =>{\r\n        // 어떤걸 체크했는지 정보를 가져오기 위함\r\n        var paraMatch = event.target.id;\r\n        var checkBox = document.getElementById(paraMatch);\r\n        // 라인긋기\r\n        var paraline = event.target.nextSibling;\r\n            if(checkBox.checked === true){\r\n                paraline.style.textDecoration = \"line-through\";\r\n            }\r\n            else{\r\n                paraline.style.textDecoration = \"none\";\r\n            }\r\n    }\r\n    const SaveHandler = () =>{\r\n        var isemptyinput = document.getElementById(\"todo_list\");\r\n        console.log(isemptyinput)\r\n        if(isemptyinput === null){\r\n            // post 통신\r\n            const requestoptions = {\r\n                headers: {\"Content-Type\": `application/json`},\r\n            }\r\n            axios.post('https://chantodo.herokuapp.com/list',JSON.stringify(Savetodos)\r\n            ,requestoptions)\r\n            .then(()=>{\r\n                alert(\"저장 성공!\")\r\n            })\r\n        }\r\n        else{\r\n            alert(\"할 일을 작성해주세요\")\r\n            return false;\r\n        }\r\n    }\r\n    const removeHandler = (event) =>{\r\n        var inputTagsection = document.querySelector(\".inputTagSection\");\r\n        const delresult = Savetodos.dolist.pop(event.target.previousSibling)\r\n        SetCountid(Countid - 1);\r\n        SetSavetodos({ ...Savetodos, listnum: Countid, dolist: delresult })\r\n        inputTagsection.removeChild(event.target.parentNode);\r\n    }\r\n    const _addtodo = () => {\r\n        // div 태그 생성\r\n        let divsection = document.createElement(\"div\");\r\n        // 저장버튼 애니메이션\r\n        var appearBtn = $('#submitbtn');\r\n        appearBtn.animate({opacity:'1'},1000);\r\n        // 쓰레기통 아이콘 엘리먼트 생성\r\n        let addtrashcan = document.createElement(\"img\");\r\n        addtrashcan.setAttribute(\"src\",trashcan);\r\n        addtrashcan.setAttribute(\"alt\",\"trash_can_img\");\r\n        addtrashcan.setAttribute(\"style\",\"width:45px;\");\r\n        // 인풋태그 추가\r\n        var tagsection = document.querySelector(\".inputTagSection\");\r\n        var addtodo = document.createElement(\"input\");\r\n        addtodo.setAttribute(\"type\",\"text\");\r\n        addtodo.setAttribute(\"id\",\"todo_list\");\r\n        addtodo.setAttribute(\"autocomplete\",\"off\");\r\n        addtodo.setAttribute(\"spellcheck\",\"false\");\r\n        addtodo.style.outline = 0;\r\n        tagsection.appendChild(addtodo);\r\n\r\n        var para = document.createElement(\"div\");\r\n        var parastr = document.createElement(\"p\");\r\n        // 체크박스 추가\r\n        var chkbox = document.createElement(\"input\");\r\n        chkbox.setAttribute(\"type\", \"checkbox\");\r\n        chkbox.setAttribute(\"style\",\"zoom:3.0;\");\r\n        chkbox.onclick = checkHandler;\r\n        // 엔터 눌렀을때\r\n        addtodo.addEventListener('keypress', function(event) {\r\n            if (event.which === 13) {\r\n                var paraContent = event.target.value;\r\n                Itershowtodos(paraContent)\r\n                // div id 셋팅\r\n                divsection.setAttribute(\"id\",Countid);\r\n                parastr.innerText = paraContent;\r\n                parastr.setAttribute(\"class\",paraContent);\r\n                para.setAttribute(\"id\",Countid);\r\n                para.setAttribute(\"class\",\"para\");\r\n                // 체크박스에 id 추가\r\n                chkbox.setAttribute(\"id\",paraContent);\r\n                // div에 체크박스 추가\r\n                para.appendChild(chkbox);\r\n                // div에 글 추가\r\n                para.appendChild(parastr);\r\n                // 쓰레기통 아이콘 id 부여\r\n                addtrashcan.setAttribute(\"id\",Countid);\r\n                // 체크박스 추가\r\n                // 글을 inputtagsection에 추가\r\n                tagsection.appendChild(para);\r\n                // 글 옆에 쓰레기통 추가\r\n                para.appendChild(addtrashcan);\r\n                // input 탭 제거\r\n                tagsection.removeChild(addtodo);\r\n                SetCountid(Countid + 1);\r\n                const newList = Savetodos.dolist.concat({paraContent})\r\n                SetSavetodos({...Savetodos,listnum:Countid,dolist:newList})\r\n            }\r\n        });\r\n        addtrashcan.onclick = removeHandler;\r\n    }\r\n    const _Renderer = (Showtodos) =>{\r\n        const paralist = Showtodos.map((arr,index)=>{\r\n            return <Itershowtodos todo={arr}\r\n            idx={index}\r\n            key={index}\r\n            ischeck = {checkHandler}\r\n            remover = {removeHandler}\r\n            />\r\n        })\r\n        return paralist\r\n    }\r\n    return(\r\n        <section id=\"todos\">\r\n            <div className=\"headtitle\">\r\n                <p>오늘 할 일은 무엇인가요?</p>\r\n                <button onClick={_addtodo}>\r\n                    <img src={plus} className=\"plusimg\" alt=\"plus_img\"></img>\r\n                </button>\r\n            </div>\r\n            <div className=\"inputTagSection\">\r\n                {Showtodos ? _Renderer(Showtodos):<p>loading</p>}\r\n            </div>\r\n            <div className=\"submitSection\">\r\n                <button id=\"submitbtn\" onClick={SaveHandler}>저장하기</button>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\nfunction Itershowtodos(props) {\r\n    const chkboxstyle={\r\n        zoom: 3.0\r\n    }\r\n    const imgstyle={\r\n        width:'45px'\r\n    }\r\n    const checker = (event) => {\r\n        props.ischeck(event)\r\n    }\r\n    const removelist = (event) => {\r\n        props.remover(event)\r\n    }\r\n    return(\r\n        <div id={props.idx} className=\"para\">\r\n            <input type=\"checkbox\" onClick={checker} style={chkboxstyle} id={props.todo}></input>\r\n            <p className={props.todo}>{props.todo}</p>\r\n            <img src={trashcan} onClick={removelist} alt=\"trash_can_img\" id={props.idx}\r\n            style={imgstyle}></img>\r\n        </div>\r\n    )\r\n}\r\nexport default Title;",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":40,"column":7,"nodeType":"29","endLine":40,"endColumn":9,"suggestions":"30"},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: '_getlist'. Either include it or remove the dependency array.","ArrayExpression",["33"],"no-global-assign","no-unsafe-negation",{"desc":"34","fix":"35"},"Update the dependencies array to be: [_getlist]",{"range":"36","text":"37"},[1354,1356],"[_getlist]"]